import { useState } from "react";
import Head from "next/head";
import moment from "moment-jalaali";
import { useRouter } from "next/router";
import Paper from "@mui/material/Paper";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid";
import Stack from "@mui/material/Stack";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Avatar from "@mui/material/Avatar";
import Badge from "@mui/material/Badge";
import CameraAltIcon from "@mui/icons-material/CameraAlt";
import TextField from "@mui/material/TextField";
import { MobileDatePicker } from "@mui/x-date-pickers/MobileDatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import AdapterJalaali from "@date-io/jalaali";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import axios from "axios";

import styles from "@/styles/Member.module.css";

export const getStaticProps = async (staticProp) => {
  const { params } = staticProp;
  if (params.slug === "new-contact") {
    return { props: {} };
  }
  const fetch = await axios("http://localhost:3000/api/contacts");
  const contacts = await fetch.data;
  return {
    props: {
      contact: contacts.find((c) => c.id === params.slug),
    },
  };
};

export const getStaticPaths = async (context) => {
  const fetch = await axios("http://localhost:3000/api/contacts");
  const contacts = await fetch.data;

  const contactPaths = contacts.map((contact) => ({
    params: { slug: contact.id },
  }));
  const paths = [...contactPaths, { params: { slug: "new-contact" } }];

  return {
    paths,
    fallback: false,
  };
};

const Member = (props) => {
  const { contact } = props;

  const [name, setName] = useState(contact ? contact.name : "");
  const [number, setNumber] = useState(contact ? contact.number : "");
  const [image, setImage] = useState(contact ? contact.image : "");
  const [birthDate, setBirthDate] = useState(
    contact ? moment(contact.birthDate, "jYYYY/jMM/jDD").format(
      "YYYY/MM/DD"
    ) : moment().format("YYYY/MM/DD")
  );
  const [imageFile, setImageFile] = useState(null);
  const route = useRouter();

  const nameHandler = (e) => {
    setName(e.target.value);
  };
  const numberHandler = (e) => {
    setNumber(e.target.value);
  };
  const birthDateHandler = (newValue) => {
    setBirthDate(newValue);
    console.log(newValue)
  };
  const imageHandler = (e) => {
    if (e.target.files.length) {
      setImage(URL.createObjectURL(e.target.files[0]));
      setImageFile(e.target.files[0]);
    }
  };
  const sendHandler = () => {
    const data = new FormData();
    if (imageFile) {
      data.set("image", imageFile, imageFile.name);
    }
    data.set("name", name);
    data.set("number", number);
    data.set("birthDate", birthDate._d);

    if (route.query.slug === "new-contact") {
      axios.post("http://localhost:3000/api/create", data, {
        headers: {
          "content-type": "multipart/form-data",
        },
      });
    } else {
      data.append("id", contact.id);
      axios.put("http://localhost:3000/api/edit", data, {
        headers: {
          "content-type": "multipart/form-data",
        },
      });
    }
  };

  moment.loadPersian({ dialect: "persian-modern" });
  return (
    <>
      <Head>
        <title>{contact ? contact.name : "مخاطب جدید"}</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Paper>
        <Container
          maxWidth='xl'
          sx={{
            minHeight: "100vh",
          }}>
          <Grid
            container
            direction='row'
            justifyContent='center'
            alignItems='center'>
            <Grid item xs={12} sm={6} md={4}>
              <Stack spacing={3} direction='column' alignItems='center'>
                <Box mt={5}>
                  <IconButton component='label'>
                    <input
                      hidden
                      accept='image/*'
                      type='file'
                      onChange={imageHandler}
                    />
                    <Badge
                      anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
                      overlap='circular'
                      badgeContent={
                        <Avatar
                          sx={{
                            width: "30px",
                            height: "30px",
                            bgcolor: "primary.main",
                          }}>
                          <CameraAltIcon sx={{ fontSize: 15 }} />
                        </Avatar>
                      }>
                      <Avatar
                        children={name.length > 0 ? name[0] : null}
                        src={image}
                        sx={{
                          fontWeight: 700,
                          fontSize: "3rem",
                          bgcolor: "primary.light",
                          width: "85px",
                          height: "85px",
                        }}
                      />
                    </Badge>
                  </IconButton>
                </Box>
                <Box width={1}>
                  <TextField
                    id='name'
                    value={name}
                    onChange={nameHandler}
                    label='نام'
                    variant='outlined'
                    type='text'
                    fullWidth
                  />
                </Box>
                <Box width={1}>
                  <TextField
                    id='number'
                    value={number}
                    onChange={numberHandler}
                    label='شماره'
                    variant='outlined'
                    type='tel'
                    fullWidth
                  />
                </Box>
                <Box width={1}>
                  <LocalizationProvider dateAdapter={AdapterJalaali}>
                    <MobileDatePicker
                      label='تاریخ تولد'
                      disableFuture
                      inputFormat='YYYY/MM/DD'
                      value={birthDate}
                      onChange={birthDateHandler}
                      renderInput={(params) => {
                        params.inputProps["aria-label"] = "birth-date";
                        params.inputProps.value = moment(birthDate).format("jYYYY/jMM/jDD");
                        return <TextField {...params} fullWidth />;
                      }}
                    />
                  </LocalizationProvider>
                </Box>
                <Box>
                  <Button
                    size='large'
                    variant='contained'
                    color='success'
                    onClick={sendHandler}>
                    ثبت
                  </Button>
                </Box>
              </Stack>
            </Grid>
          </Grid>
        </Container>
      </Paper>
    </>
  );
};

export default Member;
